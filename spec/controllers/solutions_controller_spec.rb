require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SolutionsController do

  # This should return the minimal set of attributes required to create a valid
  # Solution. As you add validations to Solution, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :source_code => "puts 'hello world'",
    }
  end

  #describe "GET index" do
  #  it "assigns all solutions as @solutions" do
  #    solution = Solution.create! valid_attributes
  #    get :index
  #    assigns(:solutions).should eq([solution])
  #  end
  #end
  # 
  #describe "GET show" do
  #  it "assigns the requested solution as @solution" do
  #    solution = Solution.create! valid_attributes
  #    get :show, :id => solution.id.to_s
  #    assigns(:solution).should eq(solution)
  #  end
  #end
  # 
  #describe "GET new" do
  #  it "assigns a new solution as @solution" do
  #    get :new
  #    assigns(:solution).should be_a_new(Solution)
  #  end
  #end
  # 
  #describe "GET edit" do
  #  it "assigns the requested solution as @solution" do
  #    solution = Solution.create! valid_attributes
  #    get :edit, :id => solution.id.to_s
  #    assigns(:solution).should eq(solution)
  #  end
  #end

  describe "POST create" do
    before do
      @competition = Factory.create(:competition)
      @problem = Factory.create(:problem)
      @user = Factory.create(:user)
    end

    describe "with valid params" do
      it "creates a new Solution" do
        expect {
          # TODO: Refactor me
          post :create, :competition_id => @competition,
          :problem_id => @problem,
          :source_code => "hello world"
        }.to change(Solution, :count).by(1)
      end

      it "assigns a newly created solution as @solution" do
        # TODO: Refactor me
        post :create,
        :competition_id => @competition,
        :problem_id => @problem,
        :source_code => "hello world"
        assigns(:solution).should be_a(Solution)
        assigns(:solution).should be_persisted
      end

      it "redirects to root" do
        # TODO: Refactor me
        post :create, :competition_id => @competition,
        :problem_id => @problem,
        :source_code => "hello world"
        response.should redirect_to(:root)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved solution as @solution" do
        # Trigger the behavior that occurs when invalid params are submitted
        Solution.any_instance.stub(:save).and_return(false)
        post :create,
        :competition_id => @competition,
        :problem_id => @problem,
        :solution => {}
        assigns(:solution).should be_a_new(Solution)
      end
    end
  end

  #describe "PUT update" do
  #  describe "with valid params" do
  #    it "updates the requested solution" do
  #      solution = Solution.create! valid_attributes
  #      # Assuming there are no other solutions in the database, this
  #      # specifies that the Solution created on the previous line
  #      # receives the :update_attributes message with whatever params are
  #      # submitted in the request.
  #      Solution.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
  #      put :update, :id => solution.id, :solution => {'these' => 'params'}
  #    end
  # 
  #    it "assigns the requested solution as @solution" do
  #      solution = Solution.create! valid_attributes
  #      put :update, :id => solution.id, :solution => valid_attributes
  #      assigns(:solution).should eq(solution)
  #    end
  # 
  #    it "redirects to the solution" do
  #      solution = Solution.create! valid_attributes
  #      put :update, :id => solution.id, :solution => valid_attributes
  #      response.should redirect_to(solution)
  #    end
  #  end
  # 
  #  describe "with invalid params" do
  #    it "assigns the solution as @solution" do
  #      solution = Solution.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      Solution.any_instance.stub(:save).and_return(false)
  #      put :update, :id => solution.id.to_s, :solution => {}
  #      assigns(:solution).should eq(solution)
  #    end
  # 
  #    it "re-renders the 'edit' template" do
  #      solution = Solution.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      Solution.any_instance.stub(:save).and_return(false)
  #      put :update, :id => solution.id.to_s, :solution => {}
  #      response.should render_template("edit")
  #    end
  #  end
  #end
  # 
  #describe "DELETE destroy" do
  #  it "destroys the requested solution" do
  #    solution = Solution.create! valid_attributes
  #    expect {
  #      delete :destroy, :id => solution.id.to_s
  #    }.to change(Solution, :count).by(-1)
  #  end
  # 
  #  it "redirects to the solutions list" do
  #    solution = Solution.create! valid_attributes
  #    delete :destroy, :id => solution.id.to_s
  #    response.should redirect_to(solutions_url)
  #  end
  #end

end
